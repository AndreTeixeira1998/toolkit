#! /usr/bin/env bash

set -euo pipefail

RC_FILE="config/overleaf.rc"

function __main__() {

  # Load vars from the rc file, prefixed with 'RC_ '
  # shellcheck disable=SC1090
  source <(
      grep -v '^#' "$RC_FILE" |     # remove lines starting with '#'
          grep . |                  # remove blank lines
          grep -E '^[A-Z_]+=' |     # filter down to variable assignments
          awk '{print "RC_" $0}'    # prefix with 'RC_'
  )

  if [[ "${RC_DEBUG:-null}" != "null" ]]; then
    echo ">>>>VARS>>>>"
    echo "$(set -o posix; set | grep ^RC_)"
    echo "<<<<<<<<<<<<"
  fi

  # Select which docker-compose files to load
  compose_file_flags=("-f ./config/docker-compose.base.yml")
  if [[ "$RC_REDIS_ENABLED" == "true" ]]; then
    compose_file_flags+=("-f ./config/docker-compose.redis.yml")
  fi
  if [[ "$RC_MONGO_ENABLED" == "true" ]]; then
    compose_file_flags+=("-f ./config/docker-compose.mongo.yml")
  fi

  # TODO: include sibling containers?

  # Include docker-compose.override.yml if it is present
  if [[ -f './config/docker-compose.override.yml' ]]; then
    compose_file_flags+=("-f ./config/docker-compose.override.yml")
  fi

  # Build up the flags to pass to docker-compose
  project_name="${RC_PROJECT_NAME:-overleaf}"

  if [[ "${RC_DEBUG:-null}" != "null" ]]; then
    echo ">>>>COMPOSE-ARGS>>>>"
    echo $project_name
    echo ${compose_file_flags[@]}
    echo "<<<<<<<<<<<<<<<<<<<<"
  fi

  # Export vars for use in docker-compose files
  export RC_IMAGE
  export RC_SHARELATEX_DATA_PATH
  export RC_DOCKER_SOCKET_PATH
  export RC_MONGO_IMAGE
  export RC_MONGO_DATA_PATH
  export RC_REDIS_IMAGE
  export RC_REDIS_DATA_PATH

  # shellcheck disable=SC2068
  exec docker-compose -p "$project_name" ${compose_file_flags[@]} "$@"
}

__main__ "$@"
