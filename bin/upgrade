#! /usr/bin/env bash

set -euo pipefail

function usage() {
  echo "Usage: bin/upgrade"
}

function services_up() {
  top_output="$(bin/docker-compose top)"
  if [[ -z "$top_output" ]]; then
    return 1
  else
    return 0
  fi
}

function git_pull_available() {
  branch="$1"
  fetch_output="$(git fetch --dry-run origin "$branch" 2>&1)"
  filtered_fetch_output="$(echo "$fetch_output" | grep '\-> origin/'"$branch")"
  if [[ -z "$filtered_fetch_output" ]]; then
    return 1
  else
    return 0
  fi
}

function handle_image_upgrade() {
  user_image_version="$(head -n 1 config/version)"
  seed_image_version="$(head -n 1 lib/config-seed/version)"

  if [[ ! "$seed_image_version" > "$user_image_version" ]]; then
    echo "No change to docker image version"
    return 0
  fi

  echo "New docker image version available ($seed_image_version)"
  echo "Current image version is '$user_image_version' (from config/version)"

  should_upgrade="n"
  read -r -p "Upgrade image? [y/n] " should_upgrade

  if [[ ! "$should_upgrade" =~ [Yy] ]]; then
    echo "Keeping image version '$user_image_version'"
    return 0
  fi

  echo "Upgrading config/version from $user_image_version to $seed_image_version"

  ## Offer to stop docker services
  services_stopped="false"
  if services_up; then
    echo "docker services are up, stop them first?"
    should_stop="n"
    read -r -p "Stop docker services? [y/n] " should_stop
    if [[ ! "$should_stop" =~ [Yy] ]]; then
      echo "exiting without stopping services"
      exit 1
    fi
    services_stopped="true"
    echo "Stopping docker services"
    bin/docker-compose stop
  fi

  ## Advise the user to take a backup
  ## (NOTE: we can't do this automatically because it will likely require
  ##  sudo privileges. We leave it to the user to sort out for now)
  echo "At this point, we recommend backing up your data before proceeding"
  echo "!! WARNING: Only do this while the docker services are stopped!!"
  should_proceed="n"
  read -r -p "Proceed? [y/n] " should_proceed
  if [[ ! "$should_proceed" =~ [Yy] ]]; then
    echo "Not proceeding with upgrade"
    return 1
  fi

  ## Set the new image version
  echo "Backing up old version file to config/__old-version"
  cp config/version config/__old-version
  echo "Over-writing config/version with $seed_image_version"
  cp lib/config-seed/version config/version

  ## Maybe offer to start services again
  if [[ "${services_stopped:-null}" == "true" ]]; then
    should_start="n"
    read -r -p "Start docker services again? [y/n] " should_start
    if [[ "$should_start" =~ [Yy] ]]; then
      echo "Starting docker services"
      bin/docker-compose up -d
    fi
  fi
}

function handle_git_update() {
  current_branch="$(git rev-parse --abbrev-ref HEAD)"
  current_commit="$(git rev-parse --short HEAD)"

  if [[ ! "$current_branch" == "master" ]]; then
    echo "Warning: current branch is not master, '$current_branch' instead"
  fi

  echo "Checking for code update..."

  if ! git_pull_available "$current_branch"; then
    echo "No code update available"
  else
    echo "Code update available! (current commit is $current_commit)"

    should_pull="n"
    read -r -p "Procced to pull update? [y/n] "

    if [[ ! "$should_pull" =~ [Yy] ]]; then
      echo "continuing without pulling update"
    else
      echo "Pulling new code..."
      git pull origin "$current_branch"
    fi
  fi
}

function __main__() {
  handle_git_update
  handle_image_upgrade
  echo "Done"
  exit 0
}

__main__ "$@"
